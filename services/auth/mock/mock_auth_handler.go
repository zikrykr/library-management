// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/port/handler.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockISignUpHandler is a mock of ISignUpHandler interface.
type MockISignUpHandler struct {
	ctrl     *gomock.Controller
	recorder *MockISignUpHandlerMockRecorder
}

// MockISignUpHandlerMockRecorder is the mock recorder for MockISignUpHandler.
type MockISignUpHandlerMockRecorder struct {
	mock *MockISignUpHandler
}

// NewMockISignUpHandler creates a new mock instance.
func NewMockISignUpHandler(ctrl *gomock.Controller) *MockISignUpHandler {
	mock := &MockISignUpHandler{ctrl: ctrl}
	mock.recorder = &MockISignUpHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISignUpHandler) EXPECT() *MockISignUpHandlerMockRecorder {
	return m.recorder
}

// SignUp mocks base method.
func (m *MockISignUpHandler) SignUp(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignUp", c)
}

// SignUp indicates an expected call of SignUp.
func (mr *MockISignUpHandlerMockRecorder) SignUp(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockISignUpHandler)(nil).SignUp), c)
}

// MockILoginHandler is a mock of ILoginHandler interface.
type MockILoginHandler struct {
	ctrl     *gomock.Controller
	recorder *MockILoginHandlerMockRecorder
}

// MockILoginHandlerMockRecorder is the mock recorder for MockILoginHandler.
type MockILoginHandlerMockRecorder struct {
	mock *MockILoginHandler
}

// NewMockILoginHandler creates a new mock instance.
func NewMockILoginHandler(ctrl *gomock.Controller) *MockILoginHandler {
	mock := &MockILoginHandler{ctrl: ctrl}
	mock.recorder = &MockILoginHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoginHandler) EXPECT() *MockILoginHandlerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockILoginHandler) Login(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", c)
}

// Login indicates an expected call of Login.
func (mr *MockILoginHandlerMockRecorder) Login(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockILoginHandler)(nil).Login), c)
}

// MockIProfileHandler is a mock of IProfileHandler interface.
type MockIProfileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIProfileHandlerMockRecorder
}

// MockIProfileHandlerMockRecorder is the mock recorder for MockIProfileHandler.
type MockIProfileHandlerMockRecorder struct {
	mock *MockIProfileHandler
}

// NewMockIProfileHandler creates a new mock instance.
func NewMockIProfileHandler(ctrl *gomock.Controller) *MockIProfileHandler {
	mock := &MockIProfileHandler{ctrl: ctrl}
	mock.recorder = &MockIProfileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProfileHandler) EXPECT() *MockIProfileHandlerMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockIProfileHandler) GetProfile(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProfile", c)
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockIProfileHandlerMockRecorder) GetProfile(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIProfileHandler)(nil).GetProfile), c)
}
