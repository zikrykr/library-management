// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/port/service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payload "github.com/zikrykr/library-management/services/auth/internal/auth/payload"
)

// MockISignUpService is a mock of ISignUpService interface.
type MockISignUpService struct {
	ctrl     *gomock.Controller
	recorder *MockISignUpServiceMockRecorder
}

// MockISignUpServiceMockRecorder is the mock recorder for MockISignUpService.
type MockISignUpServiceMockRecorder struct {
	mock *MockISignUpService
}

// NewMockISignUpService creates a new mock instance.
func NewMockISignUpService(ctrl *gomock.Controller) *MockISignUpService {
	mock := &MockISignUpService{ctrl: ctrl}
	mock.recorder = &MockISignUpServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISignUpService) EXPECT() *MockISignUpServiceMockRecorder {
	return m.recorder
}

// SignUp mocks base method.
func (m *MockISignUpService) SignUp(ctx context.Context, req payload.SignUpReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockISignUpServiceMockRecorder) SignUp(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockISignUpService)(nil).SignUp), ctx, req)
}

// MockILoginService is a mock of ILoginService interface.
type MockILoginService struct {
	ctrl     *gomock.Controller
	recorder *MockILoginServiceMockRecorder
}

// MockILoginServiceMockRecorder is the mock recorder for MockILoginService.
type MockILoginServiceMockRecorder struct {
	mock *MockILoginService
}

// NewMockILoginService creates a new mock instance.
func NewMockILoginService(ctrl *gomock.Controller) *MockILoginService {
	mock := &MockILoginService{ctrl: ctrl}
	mock.recorder = &MockILoginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoginService) EXPECT() *MockILoginServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockILoginService) Login(ctx context.Context, req payload.LoginReq) (payload.LoginResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(payload.LoginResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockILoginServiceMockRecorder) Login(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockILoginService)(nil).Login), ctx, req)
}

// MockIProfileService is a mock of IProfileService interface.
type MockIProfileService struct {
	ctrl     *gomock.Controller
	recorder *MockIProfileServiceMockRecorder
}

// MockIProfileServiceMockRecorder is the mock recorder for MockIProfileService.
type MockIProfileServiceMockRecorder struct {
	mock *MockIProfileService
}

// NewMockIProfileService creates a new mock instance.
func NewMockIProfileService(ctrl *gomock.Controller) *MockIProfileService {
	mock := &MockIProfileService{ctrl: ctrl}
	mock.recorder = &MockIProfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProfileService) EXPECT() *MockIProfileServiceMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockIProfileService) GetProfile(ctx context.Context, userEmail string) (payload.GetProfileResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, userEmail)
	ret0, _ := ret[0].(payload.GetProfileResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockIProfileServiceMockRecorder) GetProfile(ctx, userEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIProfileService)(nil).GetProfile), ctx, userEmail)
}
